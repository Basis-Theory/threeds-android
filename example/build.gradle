plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    id "org.jetbrains.kotlin.plugin.serialization" version "1.9.10"
    alias(libs.plugins.compose.compiler)
}

android {
    namespace 'com.basistheory.threeds.example'
    compileSdk 34

    defaultConfig {
        applicationId "com.basistheory.threeds.example"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildFeatures {
        buildConfig true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "BT_API_KEY_PUB", tryFindProperty("BT_API_KEY_PUB")
        }
        debug {
            buildConfigField "String", "BT_API_KEY_PUB", tryFindProperty("BT_API_KEY_PUB")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    buildFeatures {
        viewBinding true
    }
    dataBinding {
        enabled = true
    }
}

configurations.all {
    resolutionStrategy {
        force 'io.netty:netty-codec-http2:4.1.100.Final'
        force 'com.google.protobuf:protobuf-java:3.25.5'
    }
}

dependencies {
    implementation project(':lib')

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.androidx.legacy.support.v4
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.navigation.fragment
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}


/**
 * Searches for the value of a gradle property defined with the given name, preferring values
 * defined in local.properties, if available.
 * <p>
 * Note: buildConfigField requires a string value that is entered literally into an autogenerated source
 * file. Strings must be wrapped in quotes to be rendered as [String property = "value"] and the
 * string "null" is rendered as [String property = null] in the autogenerated BuildConfig file.*/
String tryFindProperty(String name) {
    var envVar = System.getenv(name)

    if(envVar != null) {
        return "\"${envVar}\""
    }

    var localProperties = tryReadLocalProperties()
    var propertyValue = localProperties[name] ?: findProperty(name)

    return propertyValue != null ? "\"${propertyValue}\"" : "null"
}

Properties tryReadLocalProperties() {
    def properties = new Properties()

    try {
        def propFile = rootProject.file("./local.properties")
        properties.load(new FileInputStream(propFile))
    } catch (ignored) {
    }

    return properties
}
